# For Prime
[general]
grbl_mode = true
config-override = false

[system]
#aux_play_led = PA12    # optional secondary play led (for lighted kill buttons) on xx xx
#flash_on_boot = true   # set to true (default) to flash the flashme.bin file if it exists on boot
#dfu_enable = false     # enable dfu for developers disabled by default
step_pulse_us = 3       # set step pulse to 3us for external driver

[motion control]
default_feed_rate = 1800 # Default speed (mm/minute) for G1/G2/G3 moves
default_seek_rate = 1800 # Default speed (mm/minute) for G0 moves
#mm_per_line_segment = 1
mm_per_arc_segment = 0.0 # Fixed length for line segments that divide arcs, 0 to disable
mm_max_arc_error = 0.01 # The maximum error for line segments that divide arcs 0 to disable
arc_correction = 5
default_acceleration = 500.0 # default acceleration in mm/sec²
arm_solution = cartesian
x_axis_max_speed = 1800 # Maximum speed in mm/min
y_axis_max_speed = 1800 # Maximum speed in mm/min
z_axis_max_speed = 1800 # Maximum speed in mm/min
compliant_seek_rate = true # G0 is always at default_seek_rate and Fxxx applies to G1 only
must_be_homed = false      # set to true to force the system to be homed before any moves can be made

#max_speed = 0           # Overall Maximum speed in mm/min (0 disables it)
#save_g92 = false       # set to true to save G92 with M500
#save_wcs = false       # set to true to save WCS (G54 etc) with M500


[planner]
junction_deviation = 0.05
#z_junction_deviation = 0.0
minimum_planner_speed = 0
planner_queue_size = 32

[actuator]
alpha.steps_per_mm = 800       # Steps per mm for alpha ( X ) stepper
alpha.max_rate = 1800          # Maximum rate in mm/min
alpha.microsteps = 32          # sets micro stepping (default 32)

beta.steps_per_mm = 800        # Steps per mm for beta ( Y ) stepper
beta.max_rate = 1800           # Maxmimum rate in mm/min
beta.microsteps = 32           # sets micro stepping (default 32)

gamma.steps_per_mm = 500         # Steps per mm for Z, for a lathe this is leadscrew: steps per rotation of motor (2000) / ((1 / TPI (12)) x 25.4)
gamma.max_rate = 1500            # Maximum rate in mm/min
gamma.acceleration = 1000        # overrides the default acceleration for this axis
gamma.driver = external          # will usually be a servo external driver
gamma.step_pin = PJ6             # Pin for external stepper step signal
gamma.dir_pin = PJ9              # Pin for external stepper direction, add '!' to reverse direction or set reversed = true
gamma.en_pin = nc                # Pin for external stepper enable, true enables, so if the chip en is low we need to invert the pin

delta.steps_per_mm = 700       # Steps per mm for extruder stepper
delta.acceleration = 500       # Acceleration for the stepper motor mm/sec²
delta.max_rate = 3000.0        # Maximum rate in mm/min
delta.microsteps = 32          # sets micro stepping (default 32)
delta.reversed = false         # set to true to reverse the direction without redefining the pin with !

common.check_driver_errors = true     # set to true means the driver (tmc2660) error bits are checked
common.halt_on_driver_alarm = false   # if set to true means ON_HALT is entered on any error bits being set

[tmc2590]
# common settings for all tmc2590 drivers, defaults are shown
#common.spi_channel = 1        # channel to use (default is 1 for Prime)
#common.reset_pin = ???        # Not on prime but some external boards may have one

# settings specific to each tmc2590 driver instance
alpha.step_interpolation = false  # set to true to turn on the step interpolation
beta.step_interpolation = false   # set to true to turn on the step interpolation
gamma.step_interpolation = false  # set to true to turn on the step interpolation
delta.step_interpolation = false # set to true to turn on the step interpolation

# Usually set to 50% to 75% of peak current
alpha.standstill_current = 0     # set the standstill current in mA, 0 is disabled
beta.standstill_current = 0      # set the standstill current in mA, 0 is disabled
gamma.standstill_current = 0     # set the standstill current in mA, 0 is disabled
delta.standstill_current = 0     # set the standstill current in mA, 0 is disabled

# depends on what is stuffed on board, these are the defaults
#alpha.sense_resistor = 50  # set to the value of the sense resistor in milliohms
#alpha.max_current = 5500   # max current in milliamps

# direct register setting... order and codes are chip dependent, values are in 32 bit Hex
# NOTE that the microsteps and current settings will be over written by the settings in current control and actuator
# M911 prints the current settings out in this format for copy/paste
#alpha.reg = 00204,981C0,A0000,C000E,E0060


# define the CS pins for the TMC2590 SPI (defaults are set for Prime)
#alpha.spi_cs_pin = PJ13
#beta.spi_cs_pin =  PG8
#gamma.spi_cs_pin = PG7
#delta.spi_cs_pin = PG6

[tmc2660]
# common settings for all tmc2660 drivers
#common.spi_channel = 1        # channel to use (default is 1 for Prime)
#common.reset_pin = ???        # Prime does not use a reset pin, but code sets to false to reset so not inverted
#common.standstill_time = 10   # time interval to check for standstill to reduce current in seconds

# settings specific to each tmc2660 driver instance
alpha.step_interpolation = false # set to true to turn on the step interpolation
beta.step_interpolation = false  # set to true to turn on the step interpolation
gamma.step_interpolation = false # set to true to turn on the step interpolation
delta.step_interpolation = false # set to true to turn on the step interpolation

# Usually set to 50% to 75% of peak current
alpha.standstill_current = 0     # set the standstill current in mA, 0 is disabled
beta.standstill_current = 0      # set the standstill current in mA, 0 is disabled
gamma.standstill_current = 0     # set the standstill current in mA, 0 is disabled
delta.standstill_current = 0     # set the standstill current in mA, 0 is disabled


# direct register setting... order and codes are chip dependent, values are in 32 bit Hex
# NOTE that the microsteps and current settings will be over written by the settings in current control and actuator
# M911 prints the current settings out in this format for copy/paste
#alpha.reg = 00204,981C0,A0000,C000E,E0060

#alpha.sense_resistor = 100  # set to the value of the sense resistor in milliohms

# define the CS pins for the TMC2660 SPI (defaults are set for Prime)
#alpha.spi_cs_pin = PJ13
#beta.spi_cs_pin =  PG8
#gamma.spi_cs_pin = PG7
#delta.spi_cs_pin = PG6

[current control]
alpha.current  = 1.8    # X stepper motor current
beta.current   = 1.8    # Y stepper motor current
gamma.current  = 1.0    # Z stepper motor current
delta.current  = 1.8    # A stepper motor current

[temperature control]
# board temperature, no controller, readonly
board.enable = true                # Whether to activate this module at all.
board.beta = 4390
#board.thermistor_pin = ADC1_0      # ADC channel for the thermistor to read
#board.designator = P               # Designator letter for this module

[switch]
msc_but.enable             = true                    # MSC button on board
msc_but.input_pin          = PJ14                    # button
msc_but.output_on_command  = msc                     # command to send
msc_but.input_pin_behavior = momentary

spindle.enable = false            # Enable this module
spindle.input_on_command = M2     # Command that will turn this switch on
spindle.input_off_command = M5    # Command that will turn this switch off
spindle.output_pin = PI4!         # Pin this module controls (SSR1)
spindle.output_type = digital     # Digital means this is just an on or off pin

[kill button]
enable = false         # Set to true to enable a kill button
pin = PJ6              # Kill button pin.
toggle_enable = false  # set to true to make it a toggle button (like an estop)
unkill_enable = true   # enable kill button hold for 2 seconds does unkill

[pwm1]
frequency=10000        # PWM1 frequency 10KHz

[laser]
enable = false   # Whether to activate the laser module at all
pwm_pin = PWM1_1 # This pin will be PWMed to control the laser.
#inverted_pwm = false # set to true to invert the pwm
#ttl_pin = PE11  # This pin turns on when the laser turns on, and off when the laser turns off.
#maximum_power = 1.0 # This is the maximum duty cycle that will be applied to the laser
#minimum_power = 0.0 # This is a value just below the minimum duty cycle that keeps the laser active without actually burning.
#default_power = 0.8 # This is the default laser power that will be used for cuts if a power has not been specified.  The value is a scale between the maximum and minimum power levels specified above

[endstops]
common.debounce_ms = 0         # debounce time in ms (actually 10ms min)
#common.is_delta = true
#common.homing_order = XYZ     # order in which axis homes (if defined)

minx.enable = true             # enable an endstop
minx.pin = PD0^                # pin
minx.homing_direction = home_to_min      # direction it moves to the endstop
minx.homing_position = 0                # the cartesian coordinate this is set to when it homes
minx.axis = X                # the axis designator
minx.max_travel = 500              # the maximum travel in mm before it times out
minx.fast_rate = 30               # fast homing rate in mm/sec
minx.slow_rate = 5               # slow homing rate in mm/sec
minx.retract = 5                # bounce off endstop in mm
minx.limit_enable = true        # enable hard limit

miny.enable = true                  # enable an endstop
miny.pin = PI1^                    # pin
miny.homing_direction = home_to_min # direction it moves to the endstop
miny.homing_position = 0            # the cartesian coordinate this is set to when it homes
miny.axis = Y                       # the axis designator
miny.max_travel = 500               # the maximum travel in mm before it times out
miny.fast_rate = 30                 # fast homing rate in mm/sec
miny.slow_rate = 5                  # slow homing rate in mm/sec
miny.retract = 5                    # bounce off endstop in mm
miny.limit_enable = true            # enable hard limits

minz.enable = true                  # enable an endstop
minz.pin = PI0^                     # pin
minz.homing_direction = home_to_min # direction it moves to the endstop
minz.homing_position = 0            # the cartesian coordinate this is set to when it homes
minz.axis = Z                       # the axis designator
minz.max_travel = 500               # the maximum travel in mm before it times out
minz.fast_rate = 30                 # fast homing rate in mm/sec
minz.slow_rate = 5                  # slow homing rate in mm/sec
minz.retract = 5                    # bounce off endstop in mm
minz.limit_enable = true            # enable hard limits

# enable limits only
#maxx.enable = false
#maxx.pin = PI3^
#maxx.axis = X
#maxx.homing_direction = home_to_max # if endstop
#maxx.limit_enable = true
#maxy.enable = false
#maxy.pin = PA9^
#maxy.axis = Y
#maxz.enable = false
#maxz.pin = PH15^
#maxz.axis = Z

[zprobe]
enable = false              # Set to true to enable a zprobe
probe_pin = PB10^           # Pin probe is attached to, if NC remove the !
slow_feedrate = 5           # Mm/sec probe feed rate
fast_feedrate = 100         # Move feedrate mm/sec
probe_height = 5            # How much above bed to start probe
leveling = three point      # leveling strategy to use
#leveling = cartesian grid  # leveling strategy to use

[three point leveling strategy]
# Example for 3-point leveling strategy
point1 = 100.0,0.0       # the first probe point (x,y) optional may be defined with M557
point2 = 200.0,200.0     # the second probe point (x,y)
point3 = 0.0,200.0       # the third probe point (x,y)
home_first = true        # home the XY axis before probing
tolerance = 0.03         # the probe tolerance in mm, anything less that this will be ignored, default is 0.03mm
probe_offsets = 0,0,0    # the probe offsets from nozzle, must be x,y,z, default is no offset
save_plane = false       # set to true to allow the bed plane to be saved with M500 default is false

[cartesian grid leveling strategy]
# Example for the cart grid leveling strategy
x_size =          75       # size of bed in the X axis
y_size =          50       # size of bed in the Y axis
grid_x_size =       7       # The size of the grid, for example, 7 causes a 7x7 grid with 49 points. Must be an odd number.
grid_y_size =       7
do_home =          true
probe_offsets =    0,0,0   # Optional probe offsets from the nozzle or tool head
save =             false   # If the saved grid is to be loaded on boot then this must be set to true
initial_height =    10     # will move to Z10 before the first probe
dampening_start =  0.5     # compensation decrease point (optional)
height_limit =       1     # no compensation to apply after this point (optional)
# optional settings
#only_by_two_corners = true
#dampening_start =  0.5    # algorithm will be applied less and less from this height onwards
#height_limit =       1    # algorithm will stop applying compensation from this point onwards
#mm_per_line_segment = 1  needed in [motion control] for cartesians using rectangular-grid

[voltage monitor]
# setup ADC3 channel for any voltage monitors. vmot and vfet are builtin
#vmotor = ADC3_0,11.0  # monitors motor voltage (Vbb) needed as drivers cannot be setup until this is on (optional scale default is 11)
#vfet = ADC3_1    # monitors fet voltage

[network]
enable = false
shell_enable = true
ftp_enable = true
webserver_enable = true
ntp_enable = true              # if true will set the RTC clock from a NTP server on boot
hostname = smoothiev2          # set hostname for device
ip_address = auto              # uses dhcp to get ip address (default)
#ip_address = 192.168.1.101    # OR set these
#ip_gateway = 192.168.1.254
#ip_mask = 255.255.255.0
#dns_server = 192.168.1.254    # set a dns server if not using DHCP (not needed unless using wget or update)
#ntp_server = pool.ntp.org     # best ntp server nearest you (default shown)
#firmware_url = http://download.smoothieware.org/  # partial URL to fetch firmware from
timezone = 0                   # timezone +/- hours from GMT (including DST if applicable)

[tm1638]
enable = false
clock_pin = PJ11              # on GA pin 6
data_pin = PJ6                # on GA pin 3
strobe_pin = PJ9              # on GA pin 4

[lathe]
# NOTE for the encoder to work PWM2 must NOT be defined
# Index pin is used for RPM and synchronizing thread starts, if not defined RPM is calculated from encoder and threading needs to be manual
enable = true
encoder_ppr = 2000    # native resolution of encoder (usually will be x2 or x4 from encoder H/W)
index_pin = PD15      # Encoder index pin (optional) on GE pin 6

[els]
enable = true

