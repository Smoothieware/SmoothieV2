# For Prime
# commented sections are optional and have builtin defaults correct for the board type, but can be overidden

[general]
grbl_mode = false
config-override = false

[system]
#flash_on_boot = true   # set to true (default) to flash the flashme.bin file if it exists on boot
#dfu_enable = false       # set to true to enable dfu for developers disabled by default
#aux_play_led = PD12  # secondary play led (for lighted kill buttons) on GC-3

[consoles]
second_usb_serial_enable = false     # set to true to enable a second USB serial console

[uart console]
enable = false
channel = 1
baudrate = 115200
bits = 8
stop_bits = 1
parity = none

[motion control]
default_feed_rate = 15000 # Default speed (mm/minute) for G1/G2/G3 moves
default_seek_rate = 15000 # Default speed (mm/minute) for G0 moves
#mm_per_line_segment = 1  # segmentation if using grid compensation
delta_segments_per_second = 100 # segmentation for deltas
#segment_z_moves_key = true   # if set to false will not segment z only moves, this would be advantageous on linear deltas
mm_per_arc_segment = 0.0 # Fixed length for line segments that divide arcs, 0 to disable
mm_max_arc_error = 0.01 # The maximum error for line segments that divide arcs 0 to disable
arc_correction = 5
default_acceleration = 2000.0 # default acceleration in mm/sec²
arm_solution = linear_delta
x_axis_max_speed = 30000 # Maximum speed in mm/min
y_axis_max_speed = 30000 # Maximum speed in mm/min
z_axis_max_speed = 10000 # Maximum speed in mm/min
compliant_seek_rate = false # if true G0 is always at default_seek_rate and Fxxx applies to G1 only
must_be_homed = true        # set to false to alow moves before being homed (not recommended on a delta)

#max_speed = 0           # Overall Maximum speed in mm/min (0 disables it)
#save_g92 = false       # set to true to save G92 with M500
#save_wcs = false       # set to true to save WCS (G54 etc) with M500

[linear delta]
arm_length = 374
arm_radius = 185.8862

[planner]
junction_deviation = 0.01
#z_junction_deviation = 0.0
minimum_planner_speed = 0
planner_queue_size = 64

[actuator]
alpha.steps_per_mm = 400    # Steps per mm for alpha ( X ) stepper
alpha.max_rate = 12000      # Maximum rate in mm/min
alpha.microsteps = 64       # sets micro stepping (default 32)

beta.steps_per_mm = 400       # Steps per mm for beta ( Y ) stepper
beta.max_rate = 12000         # Maxmimum rate in mm/min
beta.microsteps = 64          # sets micro stepping (default 32)

gamma.steps_per_mm = 400    # Steps per mm for gamma ( Z ) stepper
gamma.max_rate = 12000      # Maximum rate in mm/min
gamma.microsteps = 64       # sets micro stepping (default 32)

# Delta is first extruder, we set common stuff here instead of in extruder section
delta.steps_per_mm = 727.65    # Steps per mm for extruder stepper
delta.acceleration = 100       # Acceleration for the stepper motor mm/sec²
delta.max_rate = 900.0         # Maximum rate in mm/min
delta.microsteps = 16          # sets micro stepping (default 32)

common.check_driver_errors = true     # set to true means the driver (tmc*) error bits are checked
common.halt_on_driver_alarm = false   # if set to true means ON_HALT is entered on any error bits being set

[tmc2660]
# common settings for all tmc2660 drivers

# settings specific to each tmc2660 driver instance
alpha.step_interpolation = false # set to true to turn on the step interpolation
beta.step_interpolation = false  # set to true to turn on the step interpolation
gamma.step_interpolation = false # set to true to turn on the step interpolation
delta.step_interpolation = false # set to true to turn on the step interpolation

# Usually set to 50% to 75% of peak current
alpha.standstill_current = 0     # set the standstill current in mA, 0 is disabled
beta.standstill_current = 0      # set the standstill current in mA, 0 is disabled
gamma.standstill_current = 0     # set the standstill current in mA, 0 is disabled
delta.standstill_current = 0     # set the standstill current in mA, 0 is disabled

#alpha.sense_resistor = 100
#beta.sense_resistor = 100
#gamma.sense_resistor = 100
#delta.sense_resistor = 100

# direct register setting... order and codes are chip dependent, values are in 32 bit Hex
# NOTE that the microsteps and current settings will be over written by the settings in current control and actuator
# M911 prints the current settings out in this format for copy/paste
#alpha.reg = 00204,981C0,A0000,C000E,E0060

[current control]
alpha.current  = 1.0    # X stepper motor current
beta.current   = 1.0    # Y stepper motor current
gamma.current  = 1.0    # Z stepper motor current
delta.current  = 0.7    # First extruder stepper motor current

[switch]
msc_but.enable             = true                    # MSC button on board
msc_but.input_pin          = PJ14                    # button
msc_but.output_on_command  = msc                     # command to send
msc_but.input_pin_behavior = momentary

fan.enable = true            # Enable this module
fan.input_on_command = M106  # Command that will turn this switch on
fan.input_off_command = M107 # Command that will turn this switch off
fan.output_pin = PE1         # Pin this module controls
fan.output_type = sigmadeltapwm # PWM output settable with S parameter in the input_on_comand

fan2.enable = true            # Enable this fan for a hotend fan
fan2.input_on_command = M106  # Command that will turn this switch on
fan2.input_off_command = M107 # Command that will turn this switch off
fan2.subcode = 1              # M106.1 turns it on
fan2.output_pin = PI11        # Pin this module controls
fan2.output_type = digital    # either on or off
fan2.ignore_on_halt = true    # don't turn off if we get a halt/kill
fan2.startup_state = true     # turn fan on by default (optional)

psu.enable = true             # Enable this module
psu.input_on_command = M80    # Command that will turn this switch on
psu.input_off_command = M81   # Command that will turn this switch off
psu.output_pin = PD10o!       # Pin this module controls
psu.output_type = digital     # Digital means this is just an on or off pin

aux.enable = false             # Enable this module
aux.input_on_command = M80    # Command that will turn this switch on
aux.input_off_command = M81   # Command that will turn this switch off
aux.subcode = 1
aux.output_pin = PB7!         # Pin this module controls SSR2
aux.output_type = digital     # Digital means this is just an on or off pin

# example bltouch using PWM2
bltouch.enable = false           # set to true to enable
bltouch.output_pin = PWM2_1     # HW PWM pin on GC p6 @ 50Hz
bltouch.input_on_command = M280
bltouch.input_off_command = M281
bltouch.output_type = hwpwm
bltouch.startup_state = false   # start up in the stow state
bltouch.startup_value = 7.43    # On boot it will go into stow mode, also set with the M281
bltouch.default_on_value = 3.3  # if M280 is issued without S this is the value it will set it to

[temperature switch]
hotend.enable = true           #
hotend.designator = T          # first character of the temperature control designator to use as the temperature sensor to monitor
hotend.switch = fan2           # select which switch to use, matches the name of the defined switch
hotend.threshold_temp = 60.0   # temperature to turn on (if rising) or off the switch
hotend.heatup_poll = 15        # poll heatup at 15 sec intervals
hotend.cooldown_poll = 60      # poll cooldown at 60 sec intervals

psu_off.enable = true             #
psu_off.designator = T                # first character of the temperature control designator to use as the temperature sensor to monitor
psu_off.switch = psu              # select which switch to use, matches the name of the defined switch
psu_off.threshold_temp = 50.0             # temperature to trigger at when falling
psu_off.heatup_poll = 30               # poll heatup every 30 seconds
psu_off.cooldown_poll = 30               # poll cooldown every 30 seconds
psu_off.arm_mcode = 1100             # M1100 S1 will arm it
psu_off.trigger = falling          # only trigger when the temp falls below after being above
psu_off.inverted = false            # turn the switch off when we trigger (by default switches on when rising and off when falling)

[extruder]
hotend.enable = true             # Whether to activate the extruder module at all. All configuration is ignored if false
hotend.tool_id = 0               # T0 will select
# Firmware retract settings when using G10/G11, these are the defaults if not defined, must be defined for each extruder if not using the defaults
hotend.retract_length = 0.7          # Retract length in mm
hotend.retract_feedrate = 10         # Retract feedrate in mm/sec
hotend.retract_recover_length = 0    # Additional length for recover
hotend.retract_recover_feedrate = 8  # Recover feedrate in mm/sec (should be less than retract feedrate)
hotend.retract_zlift_length = 0.5    # Z-lift on retract in mm, 0 disables
hotend.retract_zlift_feedrate = 1200 # Z-lift feedrate in mm/min (Note mm/min NOT mm/sec)

# Second extruder module configuration
hotend2.enable = false  # Whether to activate the extruder module at all. All configuration is ignored if false
hotend2.tool_id = 1               # T1 will select

hotend2.x_offset = 0             # x offset from origin in mm
hotend2.y_offset = 25.0          # y offset from origin in mm
hotend2.z_offset = 0             # z offset from origin in mm

hotend.filament_diameter = 1.75

[temperature control]
hotend.enable = true                # Whether to activate this ( 'hotend' ) module at all.
hotend.thermistor = Semitec-104NT4  #
hotend.runaway_cooling_timeout = 900
hotend.p_factor = 45.7416        # sets pid factors
hotend.i_factor = 5.1251
hotend.d_factor = 102.0609

#hotend.tool_id = 0               # T0 will select
#hotend.thermistor_pin = ADC1_1   # ADC channel for the thermistor to read
#hotend.heater_pin = PE0          # Pin that controls the heater, set to nc if a readonly thermistor is being defined
#hotend.use_ponm = true           # uses proportional on measurement for PID control
#hotend.designator = T            # Designator letter for this module
#hotend.sensor = thermistor       # default sensor is a thermistor
#hotend.sensor = max31855        # spi based sensor
#hotend.spi_channel = 0          # SPI channel (must all be the same)
#hotend.spi_select_pin = PD10    # CS pin for SPI on GC p5
# safety settings, defaults are shown
#hotend.runaway_range =  20             # if temp swings more than this we HALT
#hotend.runaway_heating_timeout = 300   # time in seconds a heater must reach its target otherwise we HALT
#hotend.runaway_cooling_timeout = 300   # time in seconds we must cool down by (default is same as heating timeout)
#hotend.runaway_error_range = 1.0       # range in degrees temperature must be within when trying to reach a target

hotend2.enable = false  # Whether to activate this ( 'hotend' ) module at all.
hotend2.thermistor = EPCOS100K    #
#hotend2.tool_id = 1               # T1 will select
#hotend2.thermistor_pin = ADC1_2   # ADC channel for the thermistor to read
#hotend2.heater_pin = PB8          # Pin that controls the heater, set to nc if a readonly thermistor is being defined
#hotend2.designator = T2           # Designator letter for this module

bed.enable = true                 # Whether to activate this module at all.
#bed.thermistor = Honeywell100K    #
bed.beta = 4036
bed.designator = B                 # Designator letter for this module
bed.p_factor = 291.2333       # sets pid factors
bed.i_factor = 15.6577
bed.d_factor = 1354.2349

# board temperature, no controller, readonly
board.enable = true                # Whether to activate this module at all.
board.beta = 4390
#board.thermistor_pin = ADC1_0      # ADC channel for the thermistor to read

[kill button]
enable = false          # Set to true to enable a kill button
pin = PD14  # Kill button pin. on GC-4 (expects 0 to trigger)
toggle_enable = false  # set to true to make it a toggle button (like an estop)
unkill_enable = true   # enable kill button hold for 2 seconds does unkill

[pwm1]
frequency=10000        # PWM1 frequency 10KHz
[pwm2]
frequency=50           # PWM2 frequency 50 Hz

[endstops]
common.debounce_ms = 0                   # debounce time in ms (actually 10ms min)
common.delta_homing = true               # Use delta homing strategy
#common.move_to_origin_after_home = true  # move to 0,0 after homing (default is true for delta)

# NOTE called minx becuase in this example they are plugged into the min ports even though they are used for max
minx.enable = true                   # enable an endstop
minx.pin = PD0^                      # pin
minx.homing_direction = home_to_max  # direction it moves to the endstop
minx.homing_position = 0             # the cartesian coordinate this is set to when it homes
minx.axis = X                        # the axis designator
minx.max_travel = 1000               # the maximum travel in mm before it times out
minx.fast_rate = 200                 # fast homing rate in mm/sec
minx.slow_rate = 20                  # slow homing rate in mm/sec
minx.retract = 10                    # bounce off endstop in mm
minx.limit_enable = false            # enable hard limit

miny.enable = true                  # enable an endstop
miny.pin = PI1^                      # pin
miny.homing_direction = home_to_max # direction it moves to the endstop
miny.homing_position = 0            # the cartesian coordinate this is set to when it homes
miny.axis = Y                       # the axis designator
miny.max_travel = 1000              # the maximum travel in mm before it times out
miny.fast_rate = 200                # fast homing rate in mm/sec
miny.slow_rate = 20                 # slow homing rate in mm/sec
miny.retract = 10                   # bounce off endstop in mm
miny.limit_enable = false           # enable hard limits

minz.enable = true                  # enable an endstop
minz.pin = PI0^                     # pin
minz.homing_direction = home_to_max # direction it moves to the endstop
minz.homing_position =  440         # the cartesian coordinate this is set to when it homes
minz.axis = Z                       # the axis designator
minz.max_travel = 1000              # the maximum travel in mm before it times out
minz.fast_rate = 200                # fast homing rate in mm/sec
minz.slow_rate = 20                 # slow homing rate in mm/sec
minz.retract = 10                   # bounce off endstop in mm
minz.limit_enable = false           # enable hard limits

#maxx.enable = false
#maxx.pin = PI3^
#maxx.axis = X
#maxy.enable = false
#maxy.pin = PA9^
#maxy.axis = Y
#maxz.enable = false
#maxz.pin = PH15^
#maxz.axis = Z

[zprobe]
enable = true              # Set to true to enable a zprobe
probe_pin = PB10^          # Pin probe is attached to, if NC remove the !
slow_feedrate = 3           # Mm/sec probe feed rate
fast_feedrate = 100         # Move feedrate mm/sec
probe_height = 3            # How much above bed to start probe
leveling = delta grid      # leveling strategy to use
calibration = delta        # calibration strategy to use

[delta calibration strategy]
# Example for the delta calibration strategy
radius = 105             # the probe radius
initial_height = 45      # Height at which to start probing

[delta grid leveling strategy]
# Example for the delta grid leveling strategy
radius = 105           # Grid radius in millimeters
size = 25              # Grid size, must be an odd number
do_home = true         # Whether to home before calibration
save = true            # Whether to automatically save the grid
initial_height = 45    # Height at which to start probling

[voltage monitor]
# setup ADC3 channel for any voltage monitors. vmot and vfet are builtin
#vmotor = ADC3_0,11.0  # monitors motor voltage (Vbb) needed as drivers cannot be setup until this is on (optional scale default is 11)
#vfet = ADC3_1    # monitors fet voltage

[network]
enable = false
shell_enable = true
ftp_enable = true
webserver_enable = true
ntp_enable = true              # if true will set the RTC clock from a NTP server on boot
hostname = smoothiev2          # set hostname for device
ip_address = auto              # uses dhcp to get ip address (default)
#ip_address = 192.168.1.101    # OR set these
#ip_gateway = 192.168.1.254
#ip_mask = 255.255.255.0
#dns_server = 192.168.1.254    # set a dns server if not using DHCP (not needed unless using wget or update)
#ntp_server = pool.ntp.org     # best ntp server nearest you (default shown)
#firmware_url = http://download.smoothieware.org/  # partial URL to fetch firmware from
timezone = 0                   # timezone +/- hours from GMT (including DST if applicable)
