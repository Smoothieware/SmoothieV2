# For Prime alpha
# commented sections are optional and have builtin defaults correct for the board type, but can be overidden

[general]
grbl_mode = false
config-override = false

[system]
#flash_on_boot = true   # set to true (default) to flash the flashme.bin file if it exists on boot
#msc_enable = true      # set to true (default) for MSC to be available
#dfu_enable = false     # set to true to enable dfu for developers disabled by default
#aux_play_led = PJ9     # optional secondary play led (for lighted kill buttons) on GA p4
#fets_enable_pin = PF14!o        # set to a global enable pin for all fets if present
#fets_power_enable_pin = PD7!   # set to a global enable pin for all fets if present
#msc_led = PF13                # msc led flashes when in msc mode
#step_pulse_us = 1       # set step pulse to 1us default
#step_frequency = 200000 # set step frequency to 200Khz the default

[consoles]
second_usb_serial_enable = false     # set to true to enable a second USB serial console

[uart console]
enable = false
console = true
channel = 1
baudrate = 115200
bits = 8
stop_bits = 1
parity = none

[motion control]
default_feed_rate = 4000 # Default speed (mm/minute) for G1/G2/G3 moves
default_seek_rate = 4000 # Default speed (mm/minute) for G0 moves
#mm_per_line_segment = 1  # segmentation if using grid compensation
#delta_segments_per_second = 100 # segmentation for deltas
mm_per_arc_segment = 0.0 # Fixed length for line segments that divide arcs, 0 to disable
mm_max_arc_error = 0.01 # The maximum error for line segments that divide arcs 0 to disable
arc_correction = 5
default_acceleration = 1000.0 # default acceleration in mm/sec²
arm_solution = cartesian
x_axis_max_speed = 30000 # Maximum speed in mm/min
y_axis_max_speed = 30000 # Maximum speed in mm/min
z_axis_max_speed = 1800  # Maximum speed in mm/min
compliant_seek_rate = false # if true G0 is always at default_seek_rate and Fxxx applies to G1 only
must_be_homed = false       # set to true to force the system to be homed before any moves can be made

#max_speed = 0           # Overall Maximum speed in mm/min (0 disables it)
#save_g92 = false       # set to true to save G92 with M500
#save_wcs = false       # set to true to save WCS (G54 etc) with M500

[planner]
junction_deviation = 0.05
#z_junction_deviation = 0.0
minimum_planner_speed = 0
planner_queue_size = 32

[actuator]
alpha.steps_per_mm = 100       # Steps per mm for alpha ( X ) stepper
alpha.max_rate = 30000         # Maximum rate in mm/min
alpha.microsteps = 32          # sets micro stepping (default 32)
alpha.reversed = false         # set to true to reverse the direction without redefining the pin with !
# these have defaults for Prime board and are only needed here if they are being overidden
#alpha.driver = tmc2590        # sets the internal driver chip defaults to correct type based on board_id
#alpha.driver = tmc2660        # sets the internal driver chip
#alpha.driver = external       # sets the driver to external
#alpha.step_pin = PD3          # Pin for alpha stepper step signal
#alpha.dir_pin = PD4           # Pin for alpha stepper direction, add '!' to reverse direction or set reversed = true
#alpha.en_pin = nc             # Pin for alpha stepper enable, true enables, so if the chip en is low we need to invert the pin

beta.steps_per_mm = 100        # Steps per mm for beta ( Y ) stepper
beta.max_rate = 30000          # Maxmimum rate in mm/min
beta.microsteps = 32           # sets micro stepping (default 32)
beta.reversed = false          # set to true to reverse the direction without redefining the pin with !

gamma.steps_per_mm = 400    # Steps per mm for gamma ( Z ) stepper
gamma.max_rate = 1800       # Maximum rate in mm/min
gamma.acceleration = 500    # overrides the default acceleration for this axis
gamma.microsteps = 32       # sets micro stepping (default 32)
gamma.reversed = false      # set to true to reverse the direction without redefining the pin with !

# Delta is first extruder, we set common stuff here instead of in extruder section
delta.steps_per_mm = 700       # Steps per mm for extruder stepper
delta.acceleration = 500       # Acceleration for the stepper motor mm/sec²
delta.max_rate = 3000.0        # Maximum rate in mm/min
delta.microsteps = 32          # sets micro stepping (default 32)
delta.reversed = false         # set to true to reverse the direction without redefining the pin with !

common.check_driver_errors = true     # set to true means the driver (tmc*) error bits are checked
common.halt_on_driver_alarm = false   # if set to true means ON_HALT is entered on any error bits being set
#common.motors_enable_pin = PH13!     # set to a global enable pin for all motors if present

[tmc2590]
# common settings for all tmc2590 drivers, defaults are shown
#common.spi_channel = 1        # channel to use (default is 1 for Prime)
#common.reset_pin = ???        # Not on prime but some external boards may have one

# settings specific to each tmc2590 driver instance
alpha.step_interpolation = false  # set to true to turn on the step interpolation
beta.step_interpolation = false   # set to true to turn on the step interpolation
gamma.step_interpolation = false  # set to true to turn on the step interpolation
delta.step_interpolation = false # set to true to turn on the step interpolation

# Usually set to 50% to 75% of peak current
alpha.standstill_current = 0     # set the standstill current in mA, 0 is disabled
beta.standstill_current = 0      # set the standstill current in mA, 0 is disabled
gamma.standstill_current = 0     # set the standstill current in mA, 0 is disabled
delta.standstill_current = 0     # set the standstill current in mA, 0 is disabled

# depends on what is stuffed on board, these are the defaults
#alpha.sense_resistor = 50  # set to the value of the sense resistor in milliohms
#alpha.max_current = 5500   # max current in milliamps

# direct register setting... order and codes are chip dependent, values are in 32 bit Hex
# NOTE that the microsteps and current settings will be over written by the settings in current control and actuator
# M911 prints the current settings out in this format for copy/paste
#alpha.reg = 00204,981C0,A0000,C000E,E0060


# define the CS pins for the TMC2590 SPI (defaults are set for Prime)
#alpha.spi_cs_pin = PJ13
#beta.spi_cs_pin =  PG8
#gamma.spi_cs_pin = PG7
#delta.spi_cs_pin = PG6

[tmc2660]
# common settings for all tmc2660 drivers
#common.spi_channel = 1        # channel to use (default is 1 for Prime)
#common.reset_pin = ???        # Prime does not use a reset pin, but code sets to false to reset so not inverted
#common.standstill_time = 10   # time interval to check for standstill to reduce current in seconds

# settings specific to each tmc2660 driver instance
alpha.step_interpolation = false # set to true to turn on the step interpolation
beta.step_interpolation = false  # set to true to turn on the step interpolation
gamma.step_interpolation = false # set to true to turn on the step interpolation
delta.step_interpolation = false # set to true to turn on the step interpolation

# Usually set to 50% to 75% of peak current
alpha.standstill_current = 0     # set the standstill current in mA, 0 is disabled
beta.standstill_current = 0      # set the standstill current in mA, 0 is disabled
gamma.standstill_current = 0     # set the standstill current in mA, 0 is disabled
delta.standstill_current = 0     # set the standstill current in mA, 0 is disabled


# direct register setting... order and codes are chip dependent, values are in 32 bit Hex
# NOTE that the microsteps and current settings will be over written by the settings in current control and actuator
# M911 prints the current settings out in this format for copy/paste
#alpha.reg = 00204,981C0,A0000,C000E,E0060

#alpha.sense_resistor = 100  # set to the value of the sense resistor in milliohms

# define the CS pins for the TMC2660 SPI (defaults are set for Prime)
#alpha.spi_cs_pin = PJ13
#beta.spi_cs_pin =  PG8
#gamma.spi_cs_pin = PG7
#delta.spi_cs_pin = PG6

[current control]
alpha.current  = 1.5    # X stepper motor current
beta.current   = 1.5    # Y stepper motor current
gamma.current  = 1.5    # Z stepper motor current
delta.current  = 0.8    # First extruder stepper motor current

[switch]
msc_but.enable             = true                    # MSC button on board
msc_but.input_pin          = PJ14                    # button
msc_but.output_on_command  = msc                     # command to send
msc_but.input_pin_behavior = momentary

fan.enable = true            # Enable this module
fan.input_on_command = M106  # Command that will turn this switch on
fan.input_off_command = M107 # Command that will turn this switch off
fan.output_pin = PE1         # Pin this module controls
fan.output_type = sigmadeltapwm # PWM output settable with S parameter in the input_on_comand

fan2.enable = true           # Enable this fan for a hotend fan
fan2.input_on_command = M106 # Command that will turn this switch on
fan2.input_off_command = M107 # Command that will turn this switch off
fan2.subcode = 1              # M106.1 turns it on
fan2.output_pin = PI11        # Pin this module controls
fan2.output_type = digital    # either on or off
fan2.ignore_on_halt = true    # don't turn off if we get a halt/kill
#fan2.startup_state = true    # turn fan on by default (optional)

psu.enable = true             # Enable this module
psu.input_on_command = M80    # Command that will turn this switch on
psu.input_off_command = M81   # Command that will turn this switch off
psu.output_pin = PI4!         # Pin this module controls SSR1
psu.output_type = digital     # Digital means this is just an on or off pin

aux.enable = true             # Enable this module
aux.input_on_command = M80    # Command that will turn this switch on
aux.input_off_command = M81   # Command that will turn this switch off
aux.subcode = 1
aux.output_pin = PB7!         # Pin this module controls SSR2
aux.output_type = digital     # Digital means this is just an on or off pin

# example bltouch using PWM2
bltouch.enable = false          # set to true to enable
bltouch.output_pin = PWM2_1     # HW PWM pin on GC p6 @ 50Hz
bltouch.input_on_command = M280
bltouch.input_off_command = M281
bltouch.output_type = hwpwm
bltouch.startup_state = false   # start up in the stow state
bltouch.startup_value = 7.43    # On boot it will go into stow mode, also set with the M281
bltouch.default_on_value = 3.3  # if M280 is issued without S this is the value it will set it to

[temperature switch]
hotend.enable = true           #
hotend.designator = T          # first character of the temperature control designator to use as the temperature sensor to monitor
hotend.switch = fan2           # select which switch to use, matches the name of the defined switch
hotend.threshold_temp = 60.0   # temperature to turn on (if rising) or off the switch
hotend.heatup_poll = 15        # poll heatup at 15 sec intervals
hotend.cooldown_poll = 60      # poll cooldown at 60 sec intervals

[extruder]
hotend.enable = true             # Whether to activate the extruder module at all. All configuration is ignored if false
hotend.tool_id = 0               # T0 will select
# Firmware retract settings when using G10/G11, these are the defaults if not defined, must be defined for each extruder if not using the defaults
#hotend.retract_length =            3           # Retract length in mm
#hotend.retract_feedrate =         45           # Retract feedrate in mm/sec
#hotend.retract_recover_length =    0           # Additional length for recover
#hotend.retract_recover_feedrate =  8           # Recover feedrate in mm/sec (should be less than retract feedrate)
#hotend.retract_zlift_length =      0           # Z-lift on retract in mm, 0 disables
#hotend.retract_zlift_feedrate = 6000           # Z-lift feedrate in mm/min (Note mm/min NOT mm/sec)

# Second extruder module configuration
hotend2.enable = false            # Whether to activate the extruder module at all. All configuration is ignored if false
hotend2.tool_id = 1               # T1 will select

hotend2.x_offset = 0             # x offset from origin in mm
hotend2.y_offset = 25.0          # y offset from origin in mm
hotend2.z_offset = 0             # z offset from origin in mm

[temperature control]
hotend.enable = true             # Whether to activate this ( 'hotend' ) module at all.
hotend.thermistor = EPCOS100K    #
#hotend.tool_id = 0               # T0 will select
#hotend.thermistor_pin = ADC1_1   # ADC channel for the thermistor to read
#hotend.heater_pin = PE0          # Pin that controls the heater, set to nc if a readonly thermistor is being defined
#hotend.p_factor = 10             # sets pid factors
#hotend.i_factor = 0.3
#hotend.d_factor = 200
#hotend.use_ponm = true           # uses proportional on measurement for PID control
#hotend.sensor = thermistor       # default sensor is a thermistor
#hotend.designator = T            # Designator letter for this module
#hotend.sensor = max31855        # spi based sensor
#hotend.spi_channel = 0          # SPI channel (must all be the same)
#hotend.spi_select_pin = PD10    # CS pin for SPI on GC p5
# safety settings, defaults are shown
#hotend.runaway_range =  20             # if temp swings more than this we HALT
#hotend.runaway_heating_timeout = 300   # time in seconds a heater must reach its target otherwise we HALT
#hotend.runaway_cooling_timeout = 300   # time in seconds we must cool down by (default is same as heating timeout)
#hotend.runaway_error_range = 1.0       # range in degrees temperature must be within when trying to reach a target

hotend2.enable = false            # Whether to activate this ( 'hotend' ) module at all.
hotend2.thermistor = EPCOS100K    #
#hotend2.tool_id = 1               # T1 will select
#hotend2.thermistor_pin = ADC1_2   # ADC channel for the thermistor to read
#hotend2.heater_pin = PB8          # Pin that controls the heater, set to nc if a readonly thermistor is being defined
#hotend2.designator = T2           # Designator letter for this module

bed.enable = true                 # Whether to activate this module at all.
bed.thermistor = Honeywell100K    # See http://smoothieware.org/temperaturecontrol#thermistor
#bed.thermistor_pin = ADC1_3       # ADC channel for the thermistor to read
#bed.heater_pin = PE3              # Pin that controls the heater
#bed.designator = B                # Designator letter for this module

# board temperature, no controller, readonly
board.enable = true                # Whether to activate this module at all.
board.beta = 4390
#board.thermistor_pin = ADC1_0      # ADC channel for the thermistor to read
#board.designator = P               # Designator letter for this module

[kill button]
enable = false         # Set to true to enable a kill button
pin = PJ6              # Kill button pin. on GA p3 (expects 0 to trigger)
toggle_enable = false  # set to true to make it a toggle button (like an estop)
unkill_enable = true   # enable kill button hold for 2 seconds does unkill

[pwm1]
frequency=10000        # PWM1 frequency 10KHz
[pwm2]
frequency=50           # PWM2 frequency 50 Hz

[laser]
enable = false # Whether to activate the laser module at all
pwm_pin = PWM1_1 # This pin will be PWMed to control the laser. PE9 on GD p6
#inverted_pwm = false # set to true to invert the pwm
#pullup = true        # sets PWM to pullup internally (default is pullup)
#opendrain = false    # sets PWM to opendrain if set to true (default is pushpull)
#ttl_pin = PE11  # This pin turns on when the laser turns on, and off when the laser turns off.
#maximum_power = 1.0 # This is the maximum duty cycle that will be applied to the laser
#minimum_power = 0.0 # This is a value just below the minimum duty cycle that keeps the laser active without actually burning.
#default_power = 0.8 # This is the default laser power that will be used for cuts if a power has not been specified.  The value is a scale between the maximum and minimum power levels specified above
#proportional_power = true  # enable proportional power on acceleration

[endstops]
common.debounce_ms = 0         # debounce time in ms (actually 10ms min)
#common.is_delta = true
#common.homing_order = XYZ     # order in which axis homes (if defined)

minx.enable = true             # enable an endstop
minx.pin = PD0^                # pin
minx.homing_direction = home_to_min      # direction it moves to the endstop
minx.homing_position = 0                # the cartesian coordinate this is set to when it homes
minx.axis = X                # the axis designator
minx.max_travel = 500              # the maximum travel in mm before it times out
minx.fast_rate = 30               # fast homing rate in mm/sec
minx.slow_rate = 5               # slow homing rate in mm/sec
minx.retract = 5                # bounce off endstop in mm
minx.limit_enable = true        # enable hard limit

miny.enable = true                  # enable an endstop
miny.pin = PI1^                    # pin
miny.homing_direction = home_to_min # direction it moves to the endstop
miny.homing_position = 0            # the cartesian coordinate this is set to when it homes
miny.axis = Y                       # the axis designator
miny.max_travel = 500               # the maximum travel in mm before it times out
miny.fast_rate = 30                 # fast homing rate in mm/sec
miny.slow_rate = 5                  # slow homing rate in mm/sec
miny.retract = 5                    # bounce off endstop in mm
miny.limit_enable = true            # enable hard limits

minz.enable = true                  # enable an endstop
minz.pin = PI0^                     # pin
minz.homing_direction = home_to_min # direction it moves to the endstop
minz.homing_position = 0            # the cartesian coordinate this is set to when it homes
minz.axis = Z                       # the axis designator
minz.max_travel = 500               # the maximum travel in mm before it times out
minz.fast_rate = 30                 # fast homing rate in mm/sec
minz.slow_rate = 5                  # slow homing rate in mm/sec
minz.retract = 5                    # bounce off endstop in mm
minz.limit_enable = true            # enable hard limits

# enable limits only
#maxx.enable = false
#maxx.pin = PI3^
#maxx.axis = X
#maxx.limit_enable = true

#maxy.enable = false
#maxy.pin = PA9^
#maxy.axis = Y
#maxy.limit_enable = true

# if maxz is used as the endstop for A in a dual actuator setup
#maxz.enable = false
#maxz.pin = PH15^
#maxz.axis = A
#maxz.limit_enable = false  # must be false for a slaved actuator endstop

[zprobe]
enable = false              # Set to true to enable a zprobe
probe_pin = PB10^           # Pin probe is attached to, if Normally open (ground for contact) add !
slow_feedrate = 5           # Mm/sec probe feed rate
fast_feedrate = 100         # Move feedrate mm/sec
probe_height = 5            # How much above bed to start probe
max_travel = 200            # maximum z travel before it gives up
#leveling = three point      # leveling strategy to use
#leveling = delta grid      # leveling strategy to use
#leveling = cartesian grid  # leveling strategy to use
#calibration = delta        # calibration strategy to use

[three point leveling strategy]
# Example for 3-point leveling strategy
point1 = 100.0,0.0       # the first probe point (x,y) optional may be defined with M557
point2 = 200.0,200.0     # the second probe point (x,y)
point3 = 0.0,200.0       # the third probe point (x,y)
home_first = true        # home the XY axis before probing
tolerance = 0.03         # the probe tolerance in mm, anything less that this will be ignored, default is 0.03mm
probe_offsets = 0,0,0    # the probe offsets from nozzle, must be x,y,z, default is no offset
save_plane = false       # set to true to allow the bed plane to be saved with M500 default is false

[delta calibration strategy]
# Example for the delta calibration strategy
radius = 100             # the probe radius
initial_height = 20      # Height at which to start looking for bed

[delta grid leveling strategy]
# Example for the delta grid leveling strategy
radius = 50            # Grid radius in millimeters
size = 7               # Grid size, must be an odd number
do_home = true         # Whether to home before calibration
save = true            # Whether to automatically save the grid
initial_height = 20    # Height at which to start looking for bed

[cartesian grid leveling strategy]
# Example for the cart grid leveling strategy
x_size =          75       # size of bed in the X axis
y_size =          50       # size of bed in the Y axis
grid_x_size =      7       # The size of the grid, for example, 7 causes a 7x7 grid with 49 points. Must be an odd number.
grid_y_size =      7
do_home =          true
probe_offsets =    0,0,0   # Optional probe offsets from the nozzle or tool head
save =             false   # If the saved grid is to be loaded on boot then this must be set to true
initial_height =    20     # Height at which to start looking for bed

# optional settings
#only_by_two_corners = true
#dampening_start =  0.5    # algorithm will be applied less and less from this height onwards
#height_limit =       1    # algorithm will stop applying compensation from this point onwards
#mm_per_line_segment = 1  needed in [motion control] for cartesians using rectangular-grid

[voltage monitor]
# setup ADC3 channel for any voltage monitors. vmot and vfet are builtin
#vmotor = ADC3_0,11.0  # monitors motor voltage (Vbb) needed as drivers cannot be setup until this is on (optional scale default is 11)
#vfet = ADC3_1    # monitors fet voltage

[network]
enable = false
shell_enable = true
ftp_enable = true
webserver_enable = true
ntp_enable = true              # if true will set the RTC clock from a NTP server on boot
hostname = smoothiev2          # set hostname for device
ip_address = auto              # uses dhcp to get ip address (default)
#ip_address = 192.168.1.101    # OR set these
#ip_gateway = 192.168.1.1
#ip_mask = 255.255.255.0
#dns_server = 192.168.1.1      # set a dns server if not using DHCP (not needed unless using wget or update)
#ntp_server = pool.ntp.org     # best ntp server nearest you (default shown)
#firmware_url = http://download.smoothieware.org/  # partial URL to fetch firmware from
timezone = 0                   # timezone +/- hours from GMT (including DST if applicable)
